method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(TestArray) = alias <C TestArray>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(TestArray))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(TestArray) = alias <C TestArray>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(TestArray))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::TestArray#an_int {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <returnMethodTemp>$2: Integer(0) = 0
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::TestArray#a_string {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <returnMethodTemp>$2: String("str") = "str"
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String("str")
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::TestArray#test_arrays {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: TestArray = cast(<self>: NilClass, TestArray);
    <magic>$4: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$3: [] = <magic>$4: T.class_of(<Magic>).<build-array>()
    <arrayTemp>$6: Integer(1) = 1
    <arrayTemp>$7: Integer(2) = 2
    <magic>$8: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$5: [Integer(1), Integer(2)] = <magic>$8: T.class_of(<Magic>).<build-array>(<arrayTemp>$6: Integer(1), <arrayTemp>$7: Integer(2))
    <arrayTemp>$9: Integer = <self>: TestArray.an_int()
    <arrayTemp>$11: String = <self>: TestArray.a_string()
    <magic>$14: T.class_of(<Magic>) = alias <C <Magic>>
    <arrayTemp>$13: [] = <magic>$14: T.class_of(<Magic>).<build-array>()
    <magic>$15: T.class_of(<Magic>) = alias <C <Magic>>
    <returnMethodTemp>$2: [Integer, String, []] = <magic>$15: T.class_of(<Magic>).<build-array>(<arrayTemp>$9: Integer, <arrayTemp>$11: String, <arrayTemp>$13: [])
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: [Integer, String, []]
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::<Class:TestArray>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(TestArray) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U TestArray>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U TestArray>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:an_int) = :an_int
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(TestArray), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:an_int))
    <selfRestore>$10: T.class_of(TestArray) = <self>
    <unconditional>(bb0 -> bb2)

# backedges
#  bb7(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb5(rubyBlockId=1)
bb2(rubyBlockId=1):
    blockargs=(<self>: T.class_of(TestArray), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray))
    outerLoops: 1
    <block-call>: NilClass(bb2 -> bb5)

# backedges
#  bb2(rubyBlockId=1)
bb3(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray))
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(TestArray) = <selfRestore>$10
    <cfgAlias>$20: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$22: FalseClass = false
    <statTemp>$23: Symbol(:a_string) = :a_string
    <block-pre-call-temp>$24: Sorbet::Private::Static::Void = <cfgAlias>$20: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(TestArray), <statTemp>$22: FalseClass, <statTemp>$23: Symbol(:a_string))
    <selfRestore>$25: T.class_of(TestArray) = <self>
    <unconditional>(bb3 -> bb6)

# backedges
#  bb2(rubyBlockId=1)
bb5(rubyBlockId=1):
    blockargs=(<self>: T.class_of(TestArray), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(TestArray))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <cfgAlias>$16: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$13: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$16: T.class_of(Integer))
    <blockReturnTemp>$17: T.noreturn = blockreturn<sig> <blockReturnTemp>$13: T::Private::Methods::DeclBuilder
    <unconditional>(bb5 -> bb2)

# backedges
#  bb3(rubyBlockId=0)
#  bb9(rubyBlockId=2)
bb6(rubyBlockId=2):
    blockargs=(<self>: T.class_of(TestArray), <block-pre-call-temp>$24: Sorbet::Private::Static::Void, <selfRestore>$25: T.class_of(TestArray))
    outerLoops: 1
    <block-call>: NilClass(bb6 -> bb9)

# backedges
#  bb6(rubyBlockId=2)
bb7(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$24: Sorbet::Private::Static::Void, <selfRestore>$25: T.class_of(TestArray))
    <statTemp>$18: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$24, sig>
    <self>: T.class_of(TestArray) = <selfRestore>$25
    <cfgAlias>$36: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$38: T.class_of(T) = alias <C T>
    <statTemp>$33: T.class_of(TestArray) = <self>: T.class_of(TestArray).extend(<cfgAlias>$36: T.class_of(T::Sig))
    <cfgAlias>$41: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$43: Symbol(:an_int) = :an_int
    <statTemp>$44: Symbol(:normal) = :normal
    <statTemp>$39: Symbol(:an_int) = <cfgAlias>$41: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$43: Symbol(:an_int), <statTemp>$44: Symbol(:normal))
    <cfgAlias>$47: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$49: Symbol(:a_string) = :a_string
    <statTemp>$50: Symbol(:normal) = :normal
    <statTemp>$45: Symbol(:a_string) = <cfgAlias>$47: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$49: Symbol(:a_string), <statTemp>$50: Symbol(:normal))
    <cfgAlias>$53: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$55: Symbol(:test_arrays) = :test_arrays
    <statTemp>$56: Symbol(:normal) = :normal
    <statTemp>$51: Symbol(:test_arrays) = <cfgAlias>$53: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(TestArray), <statTemp>$55: Symbol(:test_arrays), <statTemp>$56: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb7 -> bb1)

# backedges
#  bb6(rubyBlockId=2)
bb9(rubyBlockId=2):
    blockargs=(<self>: T.class_of(TestArray), <block-pre-call-temp>$24: Sorbet::Private::Static::Void, <selfRestore>$25: T.class_of(TestArray))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <cfgAlias>$31: T.class_of(String) = alias <C String>
    <blockReturnTemp>$28: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$31: T.class_of(String))
    <blockReturnTemp>$32: T.noreturn = blockreturn<sig> <blockReturnTemp>$28: T::Private::Methods::DeclBuilder
    <unconditional>(bb9 -> bb6)

}

