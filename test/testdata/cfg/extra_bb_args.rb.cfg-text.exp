method ::Object#main {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <cfgAlias>$6: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(T) = alias <C T>
    <cfgAlias>$11: T.class_of(String) = alias <C String>
    <statTemp>$7: <Type: T.nilable(String)> = <cfgAlias>$9: T.class_of(T).nilable(<cfgAlias>$11: T.class_of(String))
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$7: <Type: T.nilable(String)>)
    <castTemp>$12: NilClass = nil
    name: T.nilable(String) = cast(<castTemp>$12: NilClass, String | NilClass);
    <ifTemp>$14: T::Boolean = name: T.nilable(String).nil?()
    <ifTemp>$14: T::Boolean(bb0 -> bb2)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=()
    <returnTemp>$16: String("missing name") = "missing name"
    <statTemp>$13: T.noreturn = return <returnTemp>$16: String("missing name")
    <unconditional>(bb2 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(name: String)
    <statTemp>$18: String("foo") = "foo"
    <returnMethodTemp>$2: T::Boolean = name: String.include?(<statTemp>$18: String("foo"))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Boolean
    <unconditional>(bb3 -> bb1)

}

method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:main) = :main
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:main) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$6: Symbol(:main), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:main)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

