#!/bin/bash

set -euo pipefail

# This is the base tag that we will use to generate the diff for each patch. Since the actual build will pull a release
# tarball from cache.ruby-lang.org, this must be the tag matching the tarball selected in third_party/externals.bzl.
base_tag="v2_7_2"

# Patches to apply. Each of these will be generated as "<patch name>.patch", by diffing the base tag against the branch
# "sorbet/<patch name>" on the sorbet:ruby fork.
patches=( "gc-remove-write-barrier" "init-sorbet-t-modules" "is-lambda-ifunc" "vm-method-type-sorbet" )

# Make sure we have a copy of the sorbet_ruby repo.
if [ -z "${SORBET_RUBY_REPO_ROOT:-}" ]; then
  export SORBET_RUBY_REPO_ROOT="$HOME/stripe/sorbet_ruby"
fi

if [ ! -d "$SORBET_RUBY_REPO_ROOT/.git" ]; then
  if [ ! -e "$SORBET_RUBY_REPO_ROOT" ]; then
    echo "$SORBET_RUBY_REPO_ROOT does not exist. Will clone from https://github.com/sorbet/ruby."

    git clone https://github.com/sorbet/ruby "$SORBET_RUBY_REPO_ROOT"
  else
    echo "$SORBET_RUBY_REPO_ROOT exists but is not a git repository. Halting." >&2
    exit 1
  fi
fi

cd "$SORBET_RUBY_REPO_ROOT"

# Fetch remote refs for the base tag and all patch branches.
echo "Fetching base tag $base_tag and patch branches in $SORBET_RUBY_REPO_ROOT..."
refs_to_fetch=("$base_tag")

for patch in "${patches[@]}"; do
  refs_to_fetch+=("sorbet/$patch")
done

git fetch origin "${refs_to_fetch[@]}"

# Regenerate the .patch files.
sorbet_repo_root="$(cd "$(dirname "$0")"/../.. ; pwd)"

rm -rf "$sorbet_repo_root/third_party/ruby/patches"
mkdir -p "$sorbet_repo_root/third_party/ruby/patches"

for patch in "${patches[@]}"; do
  echo "Renerating $patch.patch from branch sorbet/$patch..."
  git diff --no-prefix v2_7_2 "origin/sorbet/$patch" > "$sorbet_repo_root/third_party/ruby/patches/$patch.patch"
done

# Regenerate the .bzl file which lists the patch files.
bzl_file="$sorbet_repo_root/third_party/ruby_patches.bzl"
echo "Regenerating ruby_patches.bzl..."

cat << EOF > "$bzl_file"
# Do not edit! This file is autogenerated by tools/scripts/update_sorbet_ruby_patches.sh.
def ruby_patches():
    return [
EOF

for patch in "${patches[@]}"; do
  echo "        \"@com_stripe_ruby_typer//third_party/ruby:patches/$patch.patch\"," >> "$bzl_file"
done

cat << EOF >> "$bzl_file"
    ]
EOF

echo "Done!"
