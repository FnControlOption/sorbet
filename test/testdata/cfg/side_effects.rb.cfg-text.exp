method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(Side) = alias <C Side>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(Side))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(Side) = alias <C Side>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(Side))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Side#foo {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Side = cast(<self>: NilClass, Side);
    cond: T.untyped = load_arg(cond)
    a: Integer(1) = 1
    <statTemp>$4: Integer(1) = a
    <statTemp>$5: Integer(1) = a
    cond: T.untyped(bb0 -> bb2)

# backedges
#  bb4(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=(<statTemp>$4: Integer(1), <statTemp>$5: Integer(1))
    a: TrueClass = true
    <unconditional>(bb2 -> bb4)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(<statTemp>$4: Integer(1), <statTemp>$5: Integer(1))
    a: Integer(2) = 2
    <unconditional>(bb3 -> bb4)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb4(rubyBlockId=0):
    blockargs=(a: T.any(TrueClass, Integer), <statTemp>$4: Integer(1), <statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = <statTemp>$4: Integer(1).foo(<statTemp>$5: Integer(1), a: T.any(TrueClass, Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb4 -> bb1)

}

method ::<Class:Side>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(Side) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U Side>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Side>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:foo) = :foo
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:foo) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Side), <statTemp>$6: Symbol(:foo), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

