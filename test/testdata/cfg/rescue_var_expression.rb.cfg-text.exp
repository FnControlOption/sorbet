method ::Object#foo {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <magic>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3: T.untyped(bb0 -> bb3)

# backedges
#  bb6(rubyBlockId=3)
#  bb9(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb4(rubyBlockId=1)
bb3(rubyBlockId=2):
    blockargs=(<returnMethodTemp>$2: NilClass, <exceptionValue>$3: T.untyped, <magic>$6: T.class_of(<Magic>))
    <rescueTemp>$2: T.untyped = <exceptionValue>$3
    <cfgAlias>$9: T.class_of(Exception) = alias <C Exception>
    <isaCheckTemp>$10: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$9: T.class_of(Exception))
    <isaCheckTemp>$10: T.untyped(bb3 -> bb7)

# backedges
#  bb0(rubyBlockId=0)
bb4(rubyBlockId=1):
    blockargs=(<self>: Object, <magic>$6: T.class_of(<Magic>))
    <statTemp>$5: String("boop") = "boop"
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$5: String("boop"))
    <exceptionValue>$3 = <get-current-exception>
    <exceptionValue>$3(bb4 -> bb3)

# backedges
#  bb4(rubyBlockId=1)
bb5(rubyBlockId=4):
    blockargs=(<returnMethodTemp>$2: NilClass)
    <unconditional>(bb5 -> bb6)

# backedges
#  bb5(rubyBlockId=4)
#  bb7(rubyBlockId=2)
#  bb8(rubyBlockId=2)
bb6(rubyBlockId=3):
    blockargs=(<returnMethodTemp>$2: T.nilable(Integer), <gotoDeadTemp>$16: T.nilable(TrueClass))
    <gotoDeadTemp>$16: T.nilable(TrueClass)(bb6 -> bb1)

# backedges
#  bb3(rubyBlockId=2)
bb7(rubyBlockId=2):
    blockargs=(<magic>$6: T.class_of(<Magic>), <rescueTemp>$2: T.untyped)
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$7: Sorbet::Private::Static::Void = <magic>$6: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <cfgAlias>$14: T.class_of(MyClass) = alias <C MyClass>
    <statTemp>$12: MyClass = <cfgAlias>$14: T.class_of(MyClass).new()
    <statTemp>$11: T.untyped = <statTemp>$12: MyClass.foo=(<rescueTemp>$2: T.untyped)
    <returnMethodTemp>$2: Integer(3) = 3
    <unconditional>(bb7 -> bb6)

# backedges
#  bb3(rubyBlockId=2)
bb8(rubyBlockId=2):
    blockargs=(<returnMethodTemp>$2: NilClass)
    <gotoDeadTemp>$16: TrueClass = true
    <unconditional>(bb8 -> bb6)

# backedges
#  bb6(rubyBlockId=3)
bb9(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2: Integer(3))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)
    <unconditional>(bb9 -> bb1)

}

method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(MyClass) = alias <C MyClass>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(MyClass))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(MyClass) = alias <C MyClass>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(MyClass))
    <cfgAlias>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$18: Symbol(:foo) = :foo
    <statTemp>$19: Symbol(:normal) = :normal
    <statTemp>$14: Symbol(:foo) = <cfgAlias>$16: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$18: Symbol(:foo), <statTemp>$19: Symbol(:normal))
    <statTemp>$22: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$20: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$22: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::MyClass#foo= {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: MyClass = cast(<self>: NilClass, MyClass);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::<Class:MyClass>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(MyClass) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U MyClass>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U MyClass>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:foo=) = :foo=
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:foo=) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(MyClass), <statTemp>$6: Symbol(:foo=), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo=)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

