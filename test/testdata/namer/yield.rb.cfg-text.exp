method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(Main) = alias <C Main>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(Main))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(Main) = alias <C Main>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(Main))
    <cfgAlias>$17: T.class_of(Main) = alias <C Main>
    <statTemp>$15: Main = <cfgAlias>$17: T.class_of(Main).new()
    <statTemp>$14: T.untyped = <statTemp>$15: Main.main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Main#yielder {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Main = cast(<self>: NilClass, Main);
    <blk>: T.untyped = load_arg(<blk>)
    <statTemp>$5: Integer(1) = 1
    a: T.untyped = <blk>: T.untyped.call(<statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Main#blockpass {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Main = cast(<self>: NilClass, Main);
    blk: T.untyped = load_arg(blk)
    <statTemp>$5: Integer(1) = 1
    a: T.untyped = blk: T.untyped.call(<statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = blk: T.untyped.call(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Main#mixed {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Main = cast(<self>: NilClass, Main);
    blk: T.untyped = load_arg(blk)
    <statTemp>$5: Integer(1) = 1
    a: T.untyped = blk: T.untyped.call(<statTemp>$5: Integer(1))
    <returnMethodTemp>$2: T.untyped = blk: T.untyped.call(a: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Main#blockyield {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Main = cast(<self>: NilClass, Main);
    <blk>: T.untyped = load_arg(<blk>)
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: Main.yielder()
    <selfRestore>$5: Main = <self>
    <unconditional>(bb0 -> bb2)

# backedges
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb5(rubyBlockId=1)
bb2(rubyBlockId=1):
    blockargs=(<self>: Main, <blk>: T.untyped, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Main)
    outerLoops: 1
    <block-call>: NilClass(bb2 -> bb5)

# backedges
#  bb2(rubyBlockId=1)
bb3(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Main)
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, yielder>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb3 -> bb1)

# backedges
#  bb2(rubyBlockId=1)
bb5(rubyBlockId=1):
    blockargs=(<self>: Main, <blk>: T.untyped, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: Main)
    outerLoops: 1
    <self>: Main = loadSelf
    <blk>$6: T.untyped = load_yield_params(yielder)
    <blk>$7: Integer(0) = 0
    i$1: T.untyped = <blk>$6: T.untyped.[](<blk>$7: Integer(0))
    <blockReturnTemp>$8: T.untyped = <blk>: T.untyped.call(i$1: T.untyped)
    <blockReturnTemp>$11: T.noreturn = blockreturn<yielder> <blockReturnTemp>$8: T.untyped
    <unconditional>(bb5 -> bb2)

}

method ::Main#main {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Main = cast(<self>: NilClass, Main);
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <self>: Main.lambda()
    <selfRestore>$6: Main = <self>
    <unconditional>(bb0 -> bb2)

# backedges
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb5(rubyBlockId=1)
bb2(rubyBlockId=1):
    blockargs=(<self>: Main, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Main)
    outerLoops: 1
    <block-call>: NilClass(bb2 -> bb5)

# backedges
#  bb2(rubyBlockId=1)
bb3(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Main)
    l: T.proc.params(arg0: T.untyped).returns(T.untyped) = Solve<<block-pre-call-temp>$5, lambda>
    <self>: Main = <selfRestore>$6
    <cfgAlias>$16: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$18: Symbol(:yielder) = :yielder
    <statTemp>$14: T.untyped = <cfgAlias>$16: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$18: Symbol(:yielder), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <cfgAlias>$22: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$24: Symbol(:blockpass) = :blockpass
    <statTemp>$20: T.untyped = <cfgAlias>$22: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$24: Symbol(:blockpass), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <cfgAlias>$28: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$30: Symbol(:mixed) = :mixed
    <statTemp>$26: T.untyped = <cfgAlias>$28: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$30: Symbol(:mixed), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <cfgAlias>$33: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$35: Symbol(:blockyield) = :blockyield
    <returnMethodTemp>$2: T.untyped = <cfgAlias>$33: T.class_of(<Magic>).<call-with-block>(<self>: Main, <statTemp>$35: Symbol(:blockyield), l: T.proc.params(arg0: T.untyped).returns(T.untyped))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb3 -> bb1)

# backedges
#  bb2(rubyBlockId=1)
bb5(rubyBlockId=1):
    blockargs=(<self>: Main, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: Main)
    outerLoops: 1
    <self>: Main = loadSelf
    <blk>$7: T.untyped = load_yield_params(lambda)
    <blk>$8: Integer(0) = 0
    x$1: T.untyped = <blk>$7: T.untyped.[](<blk>$8: Integer(0))
    <statTemp>$10: NilClass = <self>: Main.puts(x$1: T.untyped)
    <blockReturnTemp>$9: Integer(3) = 3
    <blockReturnTemp>$13: T.noreturn = blockreturn<lambda> <blockReturnTemp>$9: Integer(3)
    <unconditional>(bb5 -> bb2)

}

method ::<Class:Main>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(Main) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U Main>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Main>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:yielder) = :yielder
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:yielder) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Main), <statTemp>$7: Symbol(:yielder), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:blockpass) = :blockpass
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:blockpass) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Main), <statTemp>$13: Symbol(:blockpass), <statTemp>$14: Symbol(:normal))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$19: Symbol(:mixed) = :mixed
    <statTemp>$20: Symbol(:normal) = :normal
    <statTemp>$15: Symbol(:mixed) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Main), <statTemp>$19: Symbol(:mixed), <statTemp>$20: Symbol(:normal))
    <cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$25: Symbol(:blockyield) = :blockyield
    <statTemp>$26: Symbol(:normal) = :normal
    <statTemp>$21: Symbol(:blockyield) = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Main), <statTemp>$25: Symbol(:blockyield), <statTemp>$26: Symbol(:normal))
    <cfgAlias>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$31: Symbol(:main) = :main
    <statTemp>$32: Symbol(:normal) = :normal
    <statTemp>$27: Symbol(:main) = <cfgAlias>$29: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Main), <statTemp>$31: Symbol(:main), <statTemp>$32: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

