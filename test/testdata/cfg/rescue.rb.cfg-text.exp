method ::Object#main {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <magic>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3: T.untyped(bb0 -> bb3)

# backedges
#  bb6(rubyBlockId=3)
#  bb9(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb4(rubyBlockId=1)
bb3(rubyBlockId=2):
    blockargs=(<self>: Object, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$6: T.class_of(<Magic>))
    <cfgAlias>$9: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$10: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$9: T.class_of(StandardError))
    <isaCheckTemp>$10: T.untyped(bb3 -> bb7)

# backedges
#  bb0(rubyBlockId=0)
bb4(rubyBlockId=1):
    blockargs=(<self>: Object, <magic>$6: T.class_of(<Magic>))
    <returnMethodTemp>$2: T.untyped = <self>: Object.a()
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3: T.untyped(bb4 -> bb3)

# backedges
#  bb4(rubyBlockId=1)
bb5(rubyBlockId=4):
    blockargs=(<self>: Object)
    <returnMethodTemp>$2: T.untyped = <self>: Object.c()
    <unconditional>(bb5 -> bb6)

# backedges
#  bb5(rubyBlockId=4)
#  bb7(rubyBlockId=2)
#  bb8(rubyBlockId=2)
bb6(rubyBlockId=3):
    blockargs=(<self>: Object, <returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$12: T.nilable(TrueClass))
    <throwAwayTemp>$13: T.untyped = <self>: Object.d()
    <gotoDeadTemp>$12: T.nilable(TrueClass)(bb6 -> bb1)

# backedges
#  bb3(rubyBlockId=2)
bb7(rubyBlockId=2):
    blockargs=(<self>: Object, <magic>$6: T.class_of(<Magic>))
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$7: Sorbet::Private::Static::Void = <magic>$6: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <returnMethodTemp>$2: T.untyped = <self>: Object.b()
    <unconditional>(bb7 -> bb6)

# backedges
#  bb3(rubyBlockId=2)
bb8(rubyBlockId=2):
    blockargs=(<self>: Object, <returnMethodTemp>$2: T.untyped)
    <gotoDeadTemp>$12: TrueClass = true
    <unconditional>(bb8 -> bb6)

# backedges
#  bb6(rubyBlockId=3)
bb9(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb9 -> bb1)

}

method ::Object#a {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Object#b {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Object#c {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::Object#d {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$7: Symbol(:main) = :main
    <statTemp>$8: Symbol(:normal) = :normal
    <statTemp>$3: Symbol(:main) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:main), <statTemp>$8: Symbol(:normal))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$13: Symbol(:a) = :a
    <statTemp>$14: Symbol(:normal) = :normal
    <statTemp>$9: Symbol(:a) = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$13: Symbol(:a), <statTemp>$14: Symbol(:normal))
    <cfgAlias>$17: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$19: Symbol(:b) = :b
    <statTemp>$20: Symbol(:normal) = :normal
    <statTemp>$15: Symbol(:b) = <cfgAlias>$17: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$19: Symbol(:b), <statTemp>$20: Symbol(:normal))
    <cfgAlias>$23: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$25: Symbol(:c) = :c
    <statTemp>$26: Symbol(:normal) = :normal
    <statTemp>$21: Symbol(:c) = <cfgAlias>$23: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$25: Symbol(:c), <statTemp>$26: Symbol(:normal))
    <cfgAlias>$29: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$31: Symbol(:d) = :d
    <statTemp>$32: Symbol(:normal) = :normal
    <statTemp>$27: Symbol(:d) = <cfgAlias>$29: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$31: Symbol(:d), <statTemp>$32: Symbol(:normal))
    <statTemp>$35: T.untyped = <self>: T.class_of(<root>).foo()
    <statTemp>$33: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$35: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

