method ::Object#foo {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    foo: T.untyped = load_arg(foo)
    foo: T.untyped(bb0 -> bb2)

# backedges
#  bb10(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=(foo: T.untyped)
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    bar: T.untyped = foo: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    bar: T.untyped(bb2 -> bb4)

# backedges
#  bb2(rubyBlockId=0)
bb4(rubyBlockId=0):
    blockargs=(foo: StandardError)
    e: StandardError = foo
    err: StandardError = e
    <unconditional>(bb4 -> bb7)

# backedges
#  bb0(rubyBlockId=0)
#  bb2(rubyBlockId=0)
#  bb4(rubyBlockId=0)
bb7(rubyBlockId=0):
    blockargs=(err: T.nilable(StandardError))
    junk: T.nilable(StandardError) = err
    err: T.nilable(StandardError)(bb7 -> bb8)

# backedges
#  bb7(rubyBlockId=0)
bb8(rubyBlockId=0):
    blockargs=()
    <returnMethodTemp>$2: Integer(1) = 1
    <unconditional>(bb8 -> bb10)

# backedges
#  bb7(rubyBlockId=0)
#  bb8(rubyBlockId=0)
bb10(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2: T.nilable(Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)
    <unconditional>(bb10 -> bb1)

}

method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:foo) = :foo
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:foo) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$6: Symbol(:foo), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:foo)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

