method ::Object#a {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$3: T.untyped = <get-current-exception>
    <exceptionValue>$3: T.untyped(bb0 -> bb3)

# backedges
#  bb4(rubyBlockId=1)
#  bb6(rubyBlockId=3)
#  bb9(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <exceptionValue>$3 = <get-current-exception>
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=2):
    blockargs=(<exceptionValue>$3: T.untyped, <magic>$5: T.class_of(<Magic>))
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9: T.untyped(bb3 -> bb7)

# backedges
#  bb0(rubyBlockId=0)
bb4(rubyBlockId=1):
    blockargs=()
    <returnTemp>$4: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$4: Integer(1)
    <unconditional>(bb4 -> bb1)

# backedges
#  bb7(rubyBlockId=2)
#  bb8(rubyBlockId=2)
bb6(rubyBlockId=3):
    blockargs=(<gotoDeadTemp>$10: T.nilable(TrueClass))
    <gotoDeadTemp>$10: T.nilable(TrueClass)(bb6 -> bb1)

# backedges
#  bb3(rubyBlockId=2)
bb7(rubyBlockId=2):
    blockargs=(<magic>$5: T.class_of(<Magic>))
    <exceptionValue>$3: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)
    <unconditional>(bb7 -> bb6)

# backedges
#  bb3(rubyBlockId=2)
bb8(rubyBlockId=2):
    blockargs=()
    <gotoDeadTemp>$10: TrueClass = true
    <unconditional>(bb8 -> bb6)

# backedges
#  bb6(rubyBlockId=3)
bb9(rubyBlockId=0):
    blockargs=()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb9 -> bb1)

}

method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:a) = :a
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:a) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$6: Symbol(:a), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:a)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

