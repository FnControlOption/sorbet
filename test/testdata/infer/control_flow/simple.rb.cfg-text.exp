method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(ControlFlow) = alias <C ControlFlow>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(ControlFlow))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(ControlFlow) = alias <C ControlFlow>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(ControlFlow))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::ControlFlow#orZero0 {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a: T.nilable(Integer)(bb0 -> bb2)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=(a: Integer)
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional>(bb2 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=()
    <returnTemp>$5: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$5: Integer(0)
    <unconditional>(bb3 -> bb1)

}

method ::ControlFlow#orZero0a {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: Integer = load_arg(a)
    a: Integer(bb0 -> bb2)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=(a: Integer)
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional>(bb2 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=()
    <returnTemp>$5 = 0
    <returnMethodTemp>$2 = return <returnTemp>$5
    <unconditional>(bb3 -> bb1)

}

method ::ControlFlow#orZero0n {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    b: T::Boolean = a: T.nilable(Integer).!()
    b: T::Boolean(bb0 -> bb2)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=()
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional>(bb2 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(a: Integer)
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional>(bb3 -> bb1)

}

method ::ControlFlow#orZero1n {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    <cfgAlias>$7: T.class_of(Integer) = alias <C Integer>
    <statTemp>$4: T::Boolean = a: T.nilable(Integer).is_a?(<cfgAlias>$7: T.class_of(Integer))
    b: T::Boolean = <statTemp>$4: T::Boolean.!()
    b: T::Boolean(bb0 -> bb2)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=()
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional>(bb2 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(a: Integer)
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional>(bb3 -> bb1)

}

method ::ControlFlow#orZero2 {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a: T.nilable(Integer)(bb0 -> bb4)

# backedges
#  bb4(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=()
    a: Integer(0) = 0
    <unconditional>(bb3 -> bb4)

# backedges
#  bb0(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb4(rubyBlockId=0):
    blockargs=(a: Integer)
    <returnMethodTemp>$2: Integer = a
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer
    <unconditional>(bb4 -> bb1)

}

method ::ControlFlow#orZero3 {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a: T.nilable(Integer)(bb0 -> bb2)

# backedges
#  bb5(rubyBlockId=0)
#  bb6(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=()
    <statTemp>$5: Integer(1) = 1
    <statTemp>$6: Integer(2) = 2
    <ifTemp>$3: T::Boolean = <statTemp>$5: Integer(1).==(<statTemp>$6: Integer(2))
    <ifTemp>$3: T::Boolean(bb2 -> bb5)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(a: NilClass)
    <ifTemp>$3: NilClass = a
    <ifTemp>$3: NilClass(bb3 -> bb5)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb5(rubyBlockId=0):
    blockargs=()
    <returnTemp>$7: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$7: Integer(1)
    <unconditional>(bb5 -> bb1)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb6(rubyBlockId=0):
    blockargs=()
    <returnTemp>$8: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$8: Integer(0)
    <unconditional>(bb6 -> bb1)

}

method ::ControlFlow#orZero3n {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a: T.nilable(Integer)(bb0 -> bb2)

# backedges
#  bb5(rubyBlockId=0)
#  bb6(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=()
    <statTemp>$6: Integer(1) = 1
    <statTemp>$7: Integer(2) = 2
    <statTemp>$4: T::Boolean = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))
    <unconditional>(bb2 -> bb4)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(a: NilClass)
    <statTemp>$4: NilClass = a
    <unconditional>(bb3 -> bb4)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb4(rubyBlockId=0):
    blockargs=(<statTemp>$4: T.nilable(T::Boolean))
    b: T::Boolean = <statTemp>$4: T.nilable(T::Boolean).!()
    b: T::Boolean(bb4 -> bb5)

# backedges
#  bb4(rubyBlockId=0)
bb5(rubyBlockId=0):
    blockargs=()
    <returnTemp>$9: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$9: Integer(0)
    <unconditional>(bb5 -> bb1)

# backedges
#  bb4(rubyBlockId=0)
bb6(rubyBlockId=0):
    blockargs=()
    <returnTemp>$10: Integer(1) = 1
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$10: Integer(1)
    <unconditional>(bb6 -> bb1)

}

method ::ControlFlow#orZero4 {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a: T.nilable(Integer)(bb0 -> bb2)

# backedges
#  bb5(rubyBlockId=0)
#  bb6(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=(a: Integer)
    <ifTemp>$3: Integer = a
    <ifTemp>$3: Integer(bb2 -> bb5)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(a: NilClass)
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3: TrueClass(bb3 -> bb5)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb5(rubyBlockId=0):
    blockargs=(a: T.nilable(Integer))
    <returnMethodTemp>$2: T.noreturn = return a: T.nilable(Integer)
    <unconditional>(bb5 -> bb1)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb6(rubyBlockId=0):
    blockargs=()
    <returnTemp>$6 = 0
    <returnMethodTemp>$2 = return <returnTemp>$6
    <unconditional>(bb6 -> bb1)

}

method ::ControlFlow#orZero5 {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ControlFlow = cast(<self>: NilClass, ControlFlow);
    a: T.nilable(Integer) = load_arg(a)
    a: T.nilable(Integer)(bb0 -> bb2)

# backedges
#  bb5(rubyBlockId=0)
#  bb6(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2)
    <finalReturn> = return <returnMethodTemp>$2
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb2(rubyBlockId=0):
    blockargs=(a: Integer)
    <ifTemp>$3: TrueClass = true
    <ifTemp>$3: TrueClass(bb2 -> bb5)

# backedges
#  bb0(rubyBlockId=0)
bb3(rubyBlockId=0):
    blockargs=(a: NilClass)
    <ifTemp>$3: NilClass = a
    <ifTemp>$3: NilClass(bb3 -> bb5)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb5(rubyBlockId=0):
    blockargs=(a: Integer)
    <returnMethodTemp>$2: T.noreturn = return a: Integer
    <unconditional>(bb5 -> bb1)

# backedges
#  bb2(rubyBlockId=0)
#  bb3(rubyBlockId=0)
bb6(rubyBlockId=0):
    blockargs=()
    <returnTemp>$6: Integer(0) = 0
    <returnMethodTemp>$2: T.noreturn = return <returnTemp>$6: Integer(0)
    <unconditional>(bb6 -> bb1)

}

method ::<Class:ControlFlow>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(ControlFlow) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U ControlFlow>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U ControlFlow>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$7: FalseClass = false
    <statTemp>$8: Symbol(:orZero0) = :orZero0
    <block-pre-call-temp>$9: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$7: FalseClass, <statTemp>$8: Symbol(:orZero0))
    <selfRestore>$10: T.class_of(ControlFlow) = <self>
    <unconditional>(bb0 -> bb2)

# backedges
#  bb35(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb5(rubyBlockId=1)
bb2(rubyBlockId=1):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb2 -> bb5)

# backedges
#  bb2(rubyBlockId=1)
bb3(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(ControlFlow))
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$9, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$10
    <cfgAlias>$29: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$31: FalseClass = false
    <statTemp>$32: Symbol(:orZero0a) = :orZero0a
    <block-pre-call-temp>$33: Sorbet::Private::Static::Void = <cfgAlias>$29: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$31: FalseClass, <statTemp>$32: Symbol(:orZero0a))
    <selfRestore>$34: T.class_of(ControlFlow) = <self>
    <unconditional>(bb3 -> bb6)

# backedges
#  bb2(rubyBlockId=1)
bb5(rubyBlockId=1):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$9: Sorbet::Private::Static::Void, <selfRestore>$10: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$16: Symbol(:a) = :a
    <cfgAlias>$19: T.class_of(T) = alias <C T>
    <cfgAlias>$21: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$23: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$17: <Type: T.nilable(Integer)> = <cfgAlias>$19: T.class_of(T).any(<cfgAlias>$21: T.class_of(Integer), <cfgAlias>$23: T.class_of(NilClass))
    <statTemp>$14: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$16: Symbol(:a), <hashTemp>$17: <Type: T.nilable(Integer)>)
    <cfgAlias>$25: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$13: T::Private::Methods::DeclBuilder = <statTemp>$14: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$25: T.class_of(Integer))
    <blockReturnTemp>$26: T.noreturn = blockreturn<sig> <blockReturnTemp>$13: T::Private::Methods::DeclBuilder
    <unconditional>(bb5 -> bb2)

# backedges
#  bb3(rubyBlockId=0)
#  bb9(rubyBlockId=2)
bb6(rubyBlockId=2):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$33: Sorbet::Private::Static::Void, <selfRestore>$34: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb6 -> bb9)

# backedges
#  bb6(rubyBlockId=2)
bb7(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$33: Sorbet::Private::Static::Void, <selfRestore>$34: T.class_of(ControlFlow))
    <statTemp>$27: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$33, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$34
    <cfgAlias>$48: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$50: FalseClass = false
    <statTemp>$51: Symbol(:orZero0n) = :orZero0n
    <block-pre-call-temp>$52: Sorbet::Private::Static::Void = <cfgAlias>$48: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$50: FalseClass, <statTemp>$51: Symbol(:orZero0n))
    <selfRestore>$53: T.class_of(ControlFlow) = <self>
    <unconditional>(bb7 -> bb10)

# backedges
#  bb6(rubyBlockId=2)
bb9(rubyBlockId=2):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$33: Sorbet::Private::Static::Void, <selfRestore>$34: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$40: Symbol(:a) = :a
    <cfgAlias>$42: T.class_of(Integer) = alias <C Integer>
    <statTemp>$38: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$40: Symbol(:a), <cfgAlias>$42: T.class_of(Integer))
    <cfgAlias>$44: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$37: T::Private::Methods::DeclBuilder = <statTemp>$38: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$44: T.class_of(Integer))
    <blockReturnTemp>$45: T.noreturn = blockreturn<sig> <blockReturnTemp>$37: T::Private::Methods::DeclBuilder
    <unconditional>(bb9 -> bb6)

# backedges
#  bb7(rubyBlockId=0)
#  bb13(rubyBlockId=3)
bb10(rubyBlockId=3):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$52: Sorbet::Private::Static::Void, <selfRestore>$53: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb10 -> bb13)

# backedges
#  bb10(rubyBlockId=3)
bb11(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$52: Sorbet::Private::Static::Void, <selfRestore>$53: T.class_of(ControlFlow))
    <statTemp>$46: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$52, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$53
    <cfgAlias>$72: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$74: FalseClass = false
    <statTemp>$75: Symbol(:orZero1n) = :orZero1n
    <block-pre-call-temp>$76: Sorbet::Private::Static::Void = <cfgAlias>$72: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$74: FalseClass, <statTemp>$75: Symbol(:orZero1n))
    <selfRestore>$77: T.class_of(ControlFlow) = <self>
    <unconditional>(bb11 -> bb14)

# backedges
#  bb10(rubyBlockId=3)
bb13(rubyBlockId=3):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$52: Sorbet::Private::Static::Void, <selfRestore>$53: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$59: Symbol(:a) = :a
    <cfgAlias>$62: T.class_of(T) = alias <C T>
    <cfgAlias>$64: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$66: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$60: <Type: T.nilable(Integer)> = <cfgAlias>$62: T.class_of(T).any(<cfgAlias>$64: T.class_of(Integer), <cfgAlias>$66: T.class_of(NilClass))
    <statTemp>$57: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$59: Symbol(:a), <hashTemp>$60: <Type: T.nilable(Integer)>)
    <cfgAlias>$68: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$56: T::Private::Methods::DeclBuilder = <statTemp>$57: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$68: T.class_of(Integer))
    <blockReturnTemp>$69: T.noreturn = blockreturn<sig> <blockReturnTemp>$56: T::Private::Methods::DeclBuilder
    <unconditional>(bb13 -> bb10)

# backedges
#  bb11(rubyBlockId=0)
#  bb17(rubyBlockId=4)
bb14(rubyBlockId=4):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$76: Sorbet::Private::Static::Void, <selfRestore>$77: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb14 -> bb17)

# backedges
#  bb14(rubyBlockId=4)
bb15(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$76: Sorbet::Private::Static::Void, <selfRestore>$77: T.class_of(ControlFlow))
    <statTemp>$70: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$76, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$77
    <cfgAlias>$96: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$98: FalseClass = false
    <statTemp>$99: Symbol(:orZero2) = :orZero2
    <block-pre-call-temp>$100: Sorbet::Private::Static::Void = <cfgAlias>$96: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$98: FalseClass, <statTemp>$99: Symbol(:orZero2))
    <selfRestore>$101: T.class_of(ControlFlow) = <self>
    <unconditional>(bb15 -> bb18)

# backedges
#  bb14(rubyBlockId=4)
bb17(rubyBlockId=4):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$76: Sorbet::Private::Static::Void, <selfRestore>$77: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$83: Symbol(:a) = :a
    <cfgAlias>$86: T.class_of(T) = alias <C T>
    <cfgAlias>$88: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$90: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$84: <Type: T.nilable(Integer)> = <cfgAlias>$86: T.class_of(T).any(<cfgAlias>$88: T.class_of(Integer), <cfgAlias>$90: T.class_of(NilClass))
    <statTemp>$81: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$83: Symbol(:a), <hashTemp>$84: <Type: T.nilable(Integer)>)
    <cfgAlias>$92: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$80: T::Private::Methods::DeclBuilder = <statTemp>$81: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$92: T.class_of(Integer))
    <blockReturnTemp>$93: T.noreturn = blockreturn<sig> <blockReturnTemp>$80: T::Private::Methods::DeclBuilder
    <unconditional>(bb17 -> bb14)

# backedges
#  bb15(rubyBlockId=0)
#  bb21(rubyBlockId=5)
bb18(rubyBlockId=5):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$100: Sorbet::Private::Static::Void, <selfRestore>$101: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb18 -> bb21)

# backedges
#  bb18(rubyBlockId=5)
bb19(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$100: Sorbet::Private::Static::Void, <selfRestore>$101: T.class_of(ControlFlow))
    <statTemp>$94: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$100, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$101
    <cfgAlias>$120: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$122: FalseClass = false
    <statTemp>$123: Symbol(:orZero3) = :orZero3
    <block-pre-call-temp>$124: Sorbet::Private::Static::Void = <cfgAlias>$120: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$122: FalseClass, <statTemp>$123: Symbol(:orZero3))
    <selfRestore>$125: T.class_of(ControlFlow) = <self>
    <unconditional>(bb19 -> bb22)

# backedges
#  bb18(rubyBlockId=5)
bb21(rubyBlockId=5):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$100: Sorbet::Private::Static::Void, <selfRestore>$101: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$107: Symbol(:a) = :a
    <cfgAlias>$110: T.class_of(T) = alias <C T>
    <cfgAlias>$112: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$114: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$108: <Type: T.nilable(Integer)> = <cfgAlias>$110: T.class_of(T).any(<cfgAlias>$112: T.class_of(Integer), <cfgAlias>$114: T.class_of(NilClass))
    <statTemp>$105: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$107: Symbol(:a), <hashTemp>$108: <Type: T.nilable(Integer)>)
    <cfgAlias>$116: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$104: T::Private::Methods::DeclBuilder = <statTemp>$105: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$116: T.class_of(Integer))
    <blockReturnTemp>$117: T.noreturn = blockreturn<sig> <blockReturnTemp>$104: T::Private::Methods::DeclBuilder
    <unconditional>(bb21 -> bb18)

# backedges
#  bb19(rubyBlockId=0)
#  bb25(rubyBlockId=6)
bb22(rubyBlockId=6):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$124: Sorbet::Private::Static::Void, <selfRestore>$125: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb22 -> bb25)

# backedges
#  bb22(rubyBlockId=6)
bb23(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$124: Sorbet::Private::Static::Void, <selfRestore>$125: T.class_of(ControlFlow))
    <statTemp>$118: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$124, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$125
    <cfgAlias>$144: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$146: FalseClass = false
    <statTemp>$147: Symbol(:orZero3n) = :orZero3n
    <block-pre-call-temp>$148: Sorbet::Private::Static::Void = <cfgAlias>$144: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$146: FalseClass, <statTemp>$147: Symbol(:orZero3n))
    <selfRestore>$149: T.class_of(ControlFlow) = <self>
    <unconditional>(bb23 -> bb26)

# backedges
#  bb22(rubyBlockId=6)
bb25(rubyBlockId=6):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$124: Sorbet::Private::Static::Void, <selfRestore>$125: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$131: Symbol(:a) = :a
    <cfgAlias>$134: T.class_of(T) = alias <C T>
    <cfgAlias>$136: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$138: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$132: <Type: T.nilable(Integer)> = <cfgAlias>$134: T.class_of(T).any(<cfgAlias>$136: T.class_of(Integer), <cfgAlias>$138: T.class_of(NilClass))
    <statTemp>$129: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$131: Symbol(:a), <hashTemp>$132: <Type: T.nilable(Integer)>)
    <cfgAlias>$140: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$128: T::Private::Methods::DeclBuilder = <statTemp>$129: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$140: T.class_of(Integer))
    <blockReturnTemp>$141: T.noreturn = blockreturn<sig> <blockReturnTemp>$128: T::Private::Methods::DeclBuilder
    <unconditional>(bb25 -> bb22)

# backedges
#  bb23(rubyBlockId=0)
#  bb29(rubyBlockId=7)
bb26(rubyBlockId=7):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$148: Sorbet::Private::Static::Void, <selfRestore>$149: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb26 -> bb29)

# backedges
#  bb26(rubyBlockId=7)
bb27(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$148: Sorbet::Private::Static::Void, <selfRestore>$149: T.class_of(ControlFlow))
    <statTemp>$142: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$148, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$149
    <cfgAlias>$168: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$170: FalseClass = false
    <statTemp>$171: Symbol(:orZero4) = :orZero4
    <block-pre-call-temp>$172: Sorbet::Private::Static::Void = <cfgAlias>$168: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$170: FalseClass, <statTemp>$171: Symbol(:orZero4))
    <selfRestore>$173: T.class_of(ControlFlow) = <self>
    <unconditional>(bb27 -> bb30)

# backedges
#  bb26(rubyBlockId=7)
bb29(rubyBlockId=7):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$148: Sorbet::Private::Static::Void, <selfRestore>$149: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$155: Symbol(:a) = :a
    <cfgAlias>$158: T.class_of(T) = alias <C T>
    <cfgAlias>$160: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$162: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$156: <Type: T.nilable(Integer)> = <cfgAlias>$158: T.class_of(T).any(<cfgAlias>$160: T.class_of(Integer), <cfgAlias>$162: T.class_of(NilClass))
    <statTemp>$153: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$155: Symbol(:a), <hashTemp>$156: <Type: T.nilable(Integer)>)
    <cfgAlias>$164: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$152: T::Private::Methods::DeclBuilder = <statTemp>$153: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$164: T.class_of(Integer))
    <blockReturnTemp>$165: T.noreturn = blockreturn<sig> <blockReturnTemp>$152: T::Private::Methods::DeclBuilder
    <unconditional>(bb29 -> bb26)

# backedges
#  bb27(rubyBlockId=0)
#  bb33(rubyBlockId=8)
bb30(rubyBlockId=8):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$172: Sorbet::Private::Static::Void, <selfRestore>$173: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb30 -> bb33)

# backedges
#  bb30(rubyBlockId=8)
bb31(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$172: Sorbet::Private::Static::Void, <selfRestore>$173: T.class_of(ControlFlow))
    <statTemp>$166: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$172, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$173
    <cfgAlias>$192: T.class_of(Sorbet::Private::Static::ResolvedSig) = alias <C ResolvedSig>
    <statTemp>$194: FalseClass = false
    <statTemp>$195: Symbol(:orZero5) = :orZero5
    <block-pre-call-temp>$196: Sorbet::Private::Static::Void = <cfgAlias>$192: T.class_of(Sorbet::Private::Static::ResolvedSig).sig(<self>: T.class_of(ControlFlow), <statTemp>$194: FalseClass, <statTemp>$195: Symbol(:orZero5))
    <selfRestore>$197: T.class_of(ControlFlow) = <self>
    <unconditional>(bb31 -> bb34)

# backedges
#  bb30(rubyBlockId=8)
bb33(rubyBlockId=8):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$172: Sorbet::Private::Static::Void, <selfRestore>$173: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$179: Symbol(:a) = :a
    <cfgAlias>$182: T.class_of(T) = alias <C T>
    <cfgAlias>$184: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$186: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$180: <Type: T.nilable(Integer)> = <cfgAlias>$182: T.class_of(T).any(<cfgAlias>$184: T.class_of(Integer), <cfgAlias>$186: T.class_of(NilClass))
    <statTemp>$177: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$179: Symbol(:a), <hashTemp>$180: <Type: T.nilable(Integer)>)
    <cfgAlias>$188: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$176: T::Private::Methods::DeclBuilder = <statTemp>$177: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$188: T.class_of(Integer))
    <blockReturnTemp>$189: T.noreturn = blockreturn<sig> <blockReturnTemp>$176: T::Private::Methods::DeclBuilder
    <unconditional>(bb33 -> bb30)

# backedges
#  bb31(rubyBlockId=0)
#  bb37(rubyBlockId=9)
bb34(rubyBlockId=9):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$196: Sorbet::Private::Static::Void, <selfRestore>$197: T.class_of(ControlFlow))
    outerLoops: 1
    <block-call>: NilClass(bb34 -> bb37)

# backedges
#  bb34(rubyBlockId=9)
bb35(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$196: Sorbet::Private::Static::Void, <selfRestore>$197: T.class_of(ControlFlow))
    <statTemp>$190: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$196, sig>
    <self>: T.class_of(ControlFlow) = <selfRestore>$197
    <cfgAlias>$217: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$219: T.class_of(T) = alias <C T>
    <statTemp>$214: T.class_of(ControlFlow) = <self>: T.class_of(ControlFlow).extend(<cfgAlias>$217: T.class_of(T::Sig))
    <cfgAlias>$222: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$224: Symbol(:orZero0) = :orZero0
    <statTemp>$225: Symbol(:normal) = :normal
    <statTemp>$220: Symbol(:orZero0) = <cfgAlias>$222: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$224: Symbol(:orZero0), <statTemp>$225: Symbol(:normal))
    <cfgAlias>$228: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$230: Symbol(:orZero0a) = :orZero0a
    <statTemp>$231: Symbol(:normal) = :normal
    <statTemp>$226: Symbol(:orZero0a) = <cfgAlias>$228: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$230: Symbol(:orZero0a), <statTemp>$231: Symbol(:normal))
    <cfgAlias>$234: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$236: Symbol(:orZero0n) = :orZero0n
    <statTemp>$237: Symbol(:normal) = :normal
    <statTemp>$232: Symbol(:orZero0n) = <cfgAlias>$234: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$236: Symbol(:orZero0n), <statTemp>$237: Symbol(:normal))
    <cfgAlias>$240: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$242: Symbol(:orZero1n) = :orZero1n
    <statTemp>$243: Symbol(:normal) = :normal
    <statTemp>$238: Symbol(:orZero1n) = <cfgAlias>$240: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$242: Symbol(:orZero1n), <statTemp>$243: Symbol(:normal))
    <cfgAlias>$246: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$248: Symbol(:orZero2) = :orZero2
    <statTemp>$249: Symbol(:normal) = :normal
    <statTemp>$244: Symbol(:orZero2) = <cfgAlias>$246: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$248: Symbol(:orZero2), <statTemp>$249: Symbol(:normal))
    <cfgAlias>$252: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$254: Symbol(:orZero3) = :orZero3
    <statTemp>$255: Symbol(:normal) = :normal
    <statTemp>$250: Symbol(:orZero3) = <cfgAlias>$252: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$254: Symbol(:orZero3), <statTemp>$255: Symbol(:normal))
    <cfgAlias>$258: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$260: Symbol(:orZero3n) = :orZero3n
    <statTemp>$261: Symbol(:normal) = :normal
    <statTemp>$256: Symbol(:orZero3n) = <cfgAlias>$258: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$260: Symbol(:orZero3n), <statTemp>$261: Symbol(:normal))
    <cfgAlias>$264: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$266: Symbol(:orZero4) = :orZero4
    <statTemp>$267: Symbol(:normal) = :normal
    <statTemp>$262: Symbol(:orZero4) = <cfgAlias>$264: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$266: Symbol(:orZero4), <statTemp>$267: Symbol(:normal))
    <cfgAlias>$270: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$272: Symbol(:orZero5) = :orZero5
    <statTemp>$273: Symbol(:normal) = :normal
    <statTemp>$268: Symbol(:orZero5) = <cfgAlias>$270: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ControlFlow), <statTemp>$272: Symbol(:orZero5), <statTemp>$273: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb35 -> bb1)

# backedges
#  bb34(rubyBlockId=9)
bb37(rubyBlockId=9):
    blockargs=(<self>: T.class_of(ControlFlow), <block-pre-call-temp>$196: Sorbet::Private::Static::Void, <selfRestore>$197: T.class_of(ControlFlow))
    outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf
    <hashTemp>$203: Symbol(:a) = :a
    <cfgAlias>$206: T.class_of(T) = alias <C T>
    <cfgAlias>$208: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$210: T.class_of(NilClass) = alias <C NilClass>
    <hashTemp>$204: <Type: T.nilable(Integer)> = <cfgAlias>$206: T.class_of(T).any(<cfgAlias>$208: T.class_of(Integer), <cfgAlias>$210: T.class_of(NilClass))
    <statTemp>$201: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.params(<hashTemp>$203: Symbol(:a), <hashTemp>$204: <Type: T.nilable(Integer)>)
    <cfgAlias>$212: T.class_of(Integer) = alias <C Integer>
    <blockReturnTemp>$200: T::Private::Methods::DeclBuilder = <statTemp>$201: T::Private::Methods::DeclBuilder.returns(<cfgAlias>$212: T.class_of(Integer))
    <blockReturnTemp>$213: T.noreturn = blockreturn<sig> <blockReturnTemp>$200: T::Private::Methods::DeclBuilder
    <unconditional>(bb37 -> bb34)

}

