method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(A) = alias <C A>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(A))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(A) = alias <C A>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(A))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::A#initialize {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: A = cast(<self>: NilClass, A);
    <statTemp>$3: T.untyped = <self>: A.spec_list()
    <block-pre-call-temp>$5: Sorbet::Private::Static::Void = <statTemp>$3: T.untyped.map()
    <selfRestore>$6: A = <self>
    <unconditional>(bb0 -> bb2)

# backedges
#  bb3(rubyBlockId=0)
#  bb10(rubyBlockId=4)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb13(rubyBlockId=1)
bb2(rubyBlockId=1):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: NilClass, <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    <block-call>: NilClass(bb2 -> bb5)

# backedges
#  bb2(rubyBlockId=1)
bb3(rubyBlockId=0):
    blockargs=(<block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A)
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$5, map>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional>(bb3 -> bb1)

# backedges
#  bb2(rubyBlockId=1)
bb5(rubyBlockId=1):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: NilClass, <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    <self>: A = loadSelf
    <magic>$11: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$10: T.untyped = <get-current-exception>
    <exceptionValue>$10: T.untyped(bb5 -> bb7)

# backedges
#  bb5(rubyBlockId=1)
#  bb8(rubyBlockId=2)
bb7(rubyBlockId=3):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: T.nilable(Integer), <exceptionValue>$10: T.untyped, <magic>$11: T.class_of(<Magic>), <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    se$1: T.untyped = <exceptionValue>$10
    <cfgAlias>$14: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$15: T.untyped = se$1: T.untyped.is_a?(<cfgAlias>$14: T.class_of(StandardError))
    <isaCheckTemp>$15: T.untyped(bb7 -> bb11)

# backedges
#  bb5(rubyBlockId=1)
bb8(rubyBlockId=2):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <magic>$11: T.class_of(<Magic>), <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    <blockReturnTemp>$9: Integer(1) = 1
    <exceptionValue>$10: T.untyped = <get-current-exception>
    <exceptionValue>$10: T.untyped(bb8 -> bb7)

# backedges
#  bb8(rubyBlockId=2)
bb9(rubyBlockId=5):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: Integer(1), <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    <unconditional>(bb9 -> bb10)

# backedges
#  bb9(rubyBlockId=5)
#  bb11(rubyBlockId=3)
#  bb12(rubyBlockId=3)
bb10(rubyBlockId=4):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: T.nilable(Integer), <gotoDeadTemp>$16: T.nilable(TrueClass))
    outerLoops: 1
    <gotoDeadTemp>$16: T.nilable(TrueClass)(bb10 -> bb1)

# backedges
#  bb7(rubyBlockId=3)
bb11(rubyBlockId=3):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <magic>$11: T.class_of(<Magic>), <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    <exceptionValue>$10: NilClass = nil
    <keepForCfgTemp>$12: Sorbet::Private::Static::Void = <magic>$11: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$10: NilClass)
    <blockReturnTemp>$9: Integer(2) = 2
    <unconditional>(bb11 -> bb10)

# backedges
#  bb7(rubyBlockId=3)
bb12(rubyBlockId=3):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: T.nilable(Integer))
    outerLoops: 1
    <gotoDeadTemp>$16: TrueClass = true
    <unconditional>(bb12 -> bb10)

# backedges
#  bb10(rubyBlockId=4)
bb13(rubyBlockId=1):
    blockargs=(<self>: A, <block-pre-call-temp>$5: Sorbet::Private::Static::Void, <selfRestore>$6: A, <blockReturnTemp>$9: Integer, <gotoDeadTemp>$16: NilClass)
    outerLoops: 1
    <blockReturnTemp>$18: T.noreturn = blockreturn<map> <blockReturnTemp>$9: Integer
    <unconditional>(bb13 -> bb2)

}

method ::<Class:A>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U A>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:initialize) = :initialize
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:initialize) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(A), <statTemp>$6: Symbol(:initialize), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:initialize)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

