method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$7: T.class_of(ModuleMethods) = alias <C ModuleMethods>
    <statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(ModuleMethods))
    <cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$12: T.class_of(ModuleMethods) = alias <C ModuleMethods>
    <statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(ModuleMethods))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::ModuleMethods#instrumented_request {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: ModuleMethods = cast(<self>: NilClass, ModuleMethods);
    final_attempt: T.untyped = load_arg(final_attempt)
    foo: T.untyped = load_arg(foo)
    <magic>$5: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4: T.untyped(bb0 -> bb3)

# backedges
#  bb6(rubyBlockId=3)
#  bb24(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb4(rubyBlockId=1)
bb3(rubyBlockId=2):
    blockargs=(final_attempt: T.untyped, foo: T.untyped, <exceptionValue>$4: T.untyped, <magic>$5: T.class_of(<Magic>))
    e: T.untyped = <exceptionValue>$4
    <cfgAlias>$8: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$9: T.untyped = e: T.untyped.is_a?(<cfgAlias>$8: T.class_of(StandardError))
    <isaCheckTemp>$9: T.untyped(bb3 -> bb7)

# backedges
#  bb0(rubyBlockId=0)
bb4(rubyBlockId=1):
    blockargs=(final_attempt: T.untyped, foo: T.untyped, <magic>$5: T.class_of(<Magic>))
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4: T.untyped(bb4 -> bb3)

# backedges
#  bb4(rubyBlockId=1)
bb5(rubyBlockId=4):
    blockargs=(final_attempt: T.untyped, foo: T.untyped)
    <unconditional>(bb5 -> bb6)

# backedges
#  bb5(rubyBlockId=4)
#  bb7(rubyBlockId=2)
#  bb8(rubyBlockId=2)
bb6(rubyBlockId=3):
    blockargs=(final_attempt: T.untyped, foo: T.untyped, err: T.nilable(StandardError), <gotoDeadTemp>$10: T.nilable(TrueClass))
    <gotoDeadTemp>$10: T.nilable(TrueClass)(bb6 -> bb1)

# backedges
#  bb3(rubyBlockId=2)
bb7(rubyBlockId=2):
    blockargs=(final_attempt: T.untyped, foo: T.untyped, <magic>$5: T.class_of(<Magic>), e: StandardError)
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$6: Sorbet::Private::Static::Void = <magic>$5: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    err: StandardError = e
    <unconditional>(bb7 -> bb6)

# backedges
#  bb3(rubyBlockId=2)
bb8(rubyBlockId=2):
    blockargs=(final_attempt: T.untyped, foo: T.untyped)
    <gotoDeadTemp>$10: TrueClass = true
    <unconditional>(bb8 -> bb6)

# backedges
#  bb6(rubyBlockId=3)
bb9(rubyBlockId=0):
    blockargs=(final_attempt: T.untyped, foo: T.untyped, err: T.nilable(StandardError))
    is_successful: T::Boolean = err: T.nilable(StandardError).nil?()
    is_successful: T::Boolean(bb9 -> bb10)

# backedges
#  bb9(rubyBlockId=0)
bb10(rubyBlockId=0):
    blockargs=(foo: T.untyped, err: NilClass, is_successful: TrueClass)
    ||$2: TrueClass = is_successful
    ||$2: TrueClass(bb10 -> bb13)

# backedges
#  bb9(rubyBlockId=0)
bb11(rubyBlockId=0):
    blockargs=(final_attempt: T.untyped, foo: T.untyped, err: StandardError, is_successful: FalseClass)
    ||$2: T.untyped = final_attempt
    ||$2: T.untyped(bb11 -> bb13)

# backedges
#  bb10(rubyBlockId=0)
#  bb11(rubyBlockId=0)
bb13(rubyBlockId=0):
    blockargs=(is_successful: T::Boolean, ||$2: T.untyped)
    <ifTemp>$14: T.untyped = ||$2
    <ifTemp>$14: T.untyped(bb13 -> bb19)

# backedges
#  bb10(rubyBlockId=0)
#  bb11(rubyBlockId=0)
bb14(rubyBlockId=0):
    blockargs=(foo: T.untyped, err: StandardError, is_successful: FalseClass)
    err: StandardError(bb14 -> bb15)

# backedges
#  bb14(rubyBlockId=0)
bb15(rubyBlockId=0):
    blockargs=(foo: T.untyped, is_successful: FalseClass)
    <ifTemp>$14: T.untyped = foo
    <ifTemp>$14: T.untyped(bb15 -> bb19)

# backedges
#  bb14(rubyBlockId=0)
bb16(rubyBlockId=0):
    blockargs=(err: StandardError, is_successful: FalseClass)
    <ifTemp>$14 = err
    <ifTemp>$14(bb16 -> bb19)

# backedges
#  bb13(rubyBlockId=0)
#  bb15(rubyBlockId=0)
#  bb16(rubyBlockId=0)
bb19(rubyBlockId=0):
    blockargs=(is_successful: T::Boolean)
    <ifTemp>$19: T::Boolean = is_successful: T::Boolean.!()
    <ifTemp>$19: T::Boolean(bb19 -> bb21)

# backedges
#  bb19(rubyBlockId=0)
bb21(rubyBlockId=0):
    blockargs=()
    <returnMethodTemp>$2: Integer(1) = 1
    <unconditional>(bb21 -> bb24)

# backedges
#  bb13(rubyBlockId=0)
#  bb15(rubyBlockId=0)
#  bb16(rubyBlockId=0)
#  bb19(rubyBlockId=0)
#  bb21(rubyBlockId=0)
bb24(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2: T.nilable(Integer))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Integer)
    <unconditional>(bb24 -> bb1)

}

method ::<Class:ModuleMethods>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(ModuleMethods) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U ModuleMethods>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U ModuleMethods>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$6: Symbol(:instrumented_request) = :instrumented_request
    <statTemp>$7: Symbol(:normal) = :normal
    <returnMethodTemp>$2: Symbol(:instrumented_request) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(ModuleMethods), <statTemp>$6: Symbol(:instrumented_request), <statTemp>$7: Symbol(:normal))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:instrumented_request)
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

