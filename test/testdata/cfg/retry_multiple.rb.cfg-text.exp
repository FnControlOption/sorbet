method ::Object#main {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: Object = cast(<self>: NilClass, Object);
    try: Integer(0) = 0
    <magic>$25: T.class_of(<Magic>) = alias <C <Magic>>
    <unconditional>(bb0 -> bb2)

# backedges
#  bb12(rubyBlockId=3)
#  bb17(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
#  bb13(rubyBlockId=2)
#  bb15(rubyBlockId=2)
bb2(rubyBlockId=0):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4: T.untyped(bb2 -> bb3)

# backedges
#  bb2(rubyBlockId=0)
#  bb10(rubyBlockId=1)
bb3(rubyBlockId=2):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: T.untyped, <magic>$25: T.class_of(<Magic>))
    <cfgAlias>$28: T.class_of(A) = alias <C A>
    <isaCheckTemp>$29: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<cfgAlias>$28: T.class_of(A))
    <isaCheckTemp>$29: T.untyped(bb3 -> bb13)

# backedges
#  bb2(rubyBlockId=0)
bb4(rubyBlockId=1):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <statTemp>$7: Integer(3) = 3
    <ifTemp>$5: T::Boolean = try: Integer(0).<(<statTemp>$7: Integer(3))
    <ifTemp>$5: T::Boolean(bb4 -> bb5)

# backedges
#  bb4(rubyBlockId=1)
bb5(rubyBlockId=1):
    blockargs=(<self>: Object, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <statTemp>$9: Integer(0) = try
    <statTemp>$10: Integer(1) = 1
    try: Integer = <statTemp>$9: Integer(0).+(<statTemp>$10: Integer(1))
    <cfgAlias>$14: T.class_of(A) = alias <C A>
    <statTemp>$12: A = <cfgAlias>$14: T.class_of(A).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$12: A)
    <unconditional>(bb5 -> bb10)

# backedges
#  bb4(rubyBlockId=1)
bb6(rubyBlockId=1):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <statTemp>$17: Integer(6) = 6
    <ifTemp>$15: T::Boolean = try: Integer(0).<(<statTemp>$17: Integer(6))
    <ifTemp>$15: T::Boolean(bb6 -> bb7)

# backedges
#  bb6(rubyBlockId=1)
bb7(rubyBlockId=1):
    blockargs=(<self>: Object, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <statTemp>$19: Integer(0) = try
    <statTemp>$20: Integer(1) = 1
    try: Integer = <statTemp>$19: Integer(0).+(<statTemp>$20: Integer(1))
    <cfgAlias>$24: T.class_of(B) = alias <C B>
    <statTemp>$22: B = <cfgAlias>$24: T.class_of(B).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$22: B)
    <unconditional>(bb7 -> bb10)

# backedges
#  bb5(rubyBlockId=1)
#  bb6(rubyBlockId=1)
#  bb7(rubyBlockId=1)
bb10(rubyBlockId=1):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4: T.untyped(bb10 -> bb3)

# backedges
#  bb10(rubyBlockId=1)
bb11(rubyBlockId=4):
    blockargs=(<returnMethodTemp>$2: NilClass)
    <unconditional>(bb11 -> bb12)

# backedges
#  bb11(rubyBlockId=4)
#  bb16(rubyBlockId=2)
bb12(rubyBlockId=3):
    blockargs=(<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$46: T.nilable(TrueClass))
    <gotoDeadTemp>$46: T.nilable(TrueClass)(bb12 -> bb1)

# backedges
#  bb3(rubyBlockId=2)
bb13(rubyBlockId=2):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$26: Sorbet::Private::Static::Void = <magic>$25: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    <statTemp>$32: String("rescue A ") = "rescue A "
    <statTemp>$30: NilClass = <self>: Object.puts(<statTemp>$32: String("rescue A "))
    <magic>$34: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$35: Sorbet::Private::Static::Void = <magic>$34: T.class_of(<Magic>).<retry>()
    <unconditional>(bb13 -> bb2)

# backedges
#  bb3(rubyBlockId=2)
bb14(rubyBlockId=2):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: T.untyped, <magic>$25: T.class_of(<Magic>))
    <cfgAlias>$38: T.class_of(B) = alias <C B>
    <isaCheckTemp>$39: T.untyped = <exceptionValue>$4: T.untyped.is_a?(<cfgAlias>$38: T.class_of(B))
    <isaCheckTemp>$39: T.untyped(bb14 -> bb15)

# backedges
#  bb14(rubyBlockId=2)
bb15(rubyBlockId=2):
    blockargs=(<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$25: T.class_of(<Magic>))
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$36: Sorbet::Private::Static::Void = <magic>$25: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    <statTemp>$42: String("rescue B ") = "rescue B "
    <statTemp>$40: NilClass = <self>: Object.puts(<statTemp>$42: String("rescue B "))
    <magic>$44: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$45: Sorbet::Private::Static::Void = <magic>$44: T.class_of(<Magic>).<retry>()
    <unconditional>(bb15 -> bb2)

# backedges
#  bb14(rubyBlockId=2)
bb16(rubyBlockId=2):
    blockargs=(<returnMethodTemp>$2: NilClass)
    <gotoDeadTemp>$46: TrueClass = true
    <unconditional>(bb16 -> bb12)

# backedges
#  bb12(rubyBlockId=3)
bb17(rubyBlockId=0):
    blockargs=(<returnMethodTemp>$2: NilClass)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb17 -> bb1)

}

method ::<Class:<root>>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U <root>>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)
      ]
    });
    <cfgAlias>$6: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$8: T.class_of(A) = alias <C A>
    <statTemp>$4: Sorbet::Private::Static::Void = <cfgAlias>$6: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$8: T.class_of(A))
    <cfgAlias>$11: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$13: T.class_of(A) = alias <C A>
    <statTemp>$9: Sorbet::Private::Static::Void = <cfgAlias>$11: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$13: T.class_of(A))
    <cfgAlias>$16: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$18: T.class_of(Exception) = alias <C Exception>
    <statTemp>$14: Sorbet::Private::Static::Void = <cfgAlias>$16: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$18: T.class_of(Exception))
    <cfgAlias>$22: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$24: T.class_of(B) = alias <C B>
    <statTemp>$20: Sorbet::Private::Static::Void = <cfgAlias>$22: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$24: T.class_of(B))
    <cfgAlias>$27: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$29: T.class_of(B) = alias <C B>
    <statTemp>$25: Sorbet::Private::Static::Void = <cfgAlias>$27: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$29: T.class_of(B))
    <cfgAlias>$32: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$34: T.class_of(Exception) = alias <C Exception>
    <statTemp>$30: Sorbet::Private::Static::Void = <cfgAlias>$32: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$34: T.class_of(Exception))
    <cfgAlias>$37: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <statTemp>$39: Symbol(:main) = :main
    <statTemp>$40: Symbol(:normal) = :normal
    <statTemp>$35: Symbol(:main) = <cfgAlias>$37: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$39: Symbol(:main), <statTemp>$40: Symbol(:normal))
    <statTemp>$41: T.untyped = <self>: T.class_of(<root>).main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::<Class:A>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(A) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U A>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U A>> $1><C <U <AttachedClass>>>)
      ]
    });
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

method ::<Class:B>#<static-init> {

bb0(rubyBlockId=0):
    blockargs=()
    <self>: T.class_of(B) = cast(<self>: NilClass, AppliedType {
      klass = <S <C <U B>> $1>
      targs = [
        <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U B>> $1><C <U <AttachedClass>>>)
      ]
    });
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional>(bb0 -> bb1)

# backedges
#  bb0(rubyBlockId=0)
bb1(rubyBlockId=0):
    blockargs=()
    <unconditional>(bb1 -> bb1)

}

